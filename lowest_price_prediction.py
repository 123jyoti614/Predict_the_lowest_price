# -*- coding: utf-8 -*-
"""lowest_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VznYgw0a1vBY03rn2F8iV-3nM5niippL
"""

import pandas as pd
import numpy as np

train_df=pd.read_csv('/content/Train.csv')
test_df=pd.read_csv('/content/Test.csv')

train_df.head()

train_df.info()

train_df.isnull().sum()

train_df.shape

import seaborn as sns
import matplotlib.pyplot as plt

sns.boxplot(x='Grade', y='Low_Cap_Price', data=train_df)
plt.show()

sns.scatterplot(x='High_Cap_Price', y='Low_Cap_Price', data=train_df)
plt.show()

"""Date → Extract year, month, maybe day_of_week

Categorical encoding:

One-hot encode: Market_Category, Product_Category, Grade, State_of_Country

Or try Label Encoding or Target Encoding (if applicable)

Scaling: You may need to scale numerical features like Demand, High_Cap_Price
"""

train_df['Date']=pd.to_datetime(train_df['Date'])
train_df['year']=train_df['Date'].dt.year
train_df['month']=train_df['Date'].dt.month

test_df['Date']=pd.to_datetime(test_df['Date'])
test_df['year']=test_df['Date'].dt.year
test_df['month']=test_df['Date'].dt.month

train_df.drop(columns=['Date'],inplace=True)
test_df.drop(columns=['Date'],inplace=True)

train_df.drop(columns=['Item_Id'],inplace=True)
test_ids=test_df['Item_Id']
test_df.drop(columns=['Item_Id'],inplace=True)

target=train_df['Low_Cap_Price']
train_df.drop(columns=['Low_Cap_Price'],inplace=True)

combined=pd.concat([train_df,test_df],axis=0)

combined=pd.get_dummies(combined,columns=[
    'State_of_Country',
    'Market_Category',
    'Product_Category',
    'Grade'
],drop_first=True)

X_train = combined.iloc[:len(target), :]
X_test = combined.iloc[len(target):, :]
y_train = target

"""Step 4: Model Building
Since it’s a regression problem, you can start with the following models:

Linear Regression (baseline)

Random Forest Regressor

Gradient Boosting (XGBoost / LightGBM / CatBoost)
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error,r2_score

X_train,X_test,y_train,y_test=train_test_split(X_train,y_train,test_size=0.2,random_state=42)
model = LinearRegression()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print(f"Mse:{mse}")
print(f"r2:{r2}")

model=RandomForestRegressor(n_estimators=100,random_state=42)
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print(f"Mse:{mse}")
print(f"r2:{r2}")

